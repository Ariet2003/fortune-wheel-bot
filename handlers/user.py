from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import get_grade_keyboard, get_play_keyboard, get_check_prize_keyboard, get_admin_keyboard
from database import Database

router = Router()
db = Database()

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_grade = State()
    last_message_id = State()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    is_admin = await db.is_admin(message.from_user.id)
    if is_admin:
        msg = await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=get_admin_keyboard()
        )
        await state.update_data(last_message_id=msg.message_id)
        return

    user = await db.get_user(message.from_user.id)
    if user:
        msg = await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.", 
            reply_markup=get_play_keyboard()
        )
        await state.update_data(last_message_id=msg.message_id)
        return

    msg = await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã! üé°\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(RegistrationStates.waiting_for_name)
    await state.update_data(last_message_id=msg.message_id)

@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    state_data = await state.get_data()
    try:
        await message.bot.delete_message(
            message.chat.id,
            state_data.get("last_message_id")
        )
    except:
        pass
    
    await message.delete()
    await state.update_data(full_name=message.text)
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:", reply_markup=get_grade_keyboard())
    await state.update_data(last_message_id=msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_grade)

@router.message(RegistrationStates.waiting_for_grade)
async def process_grade(message: types.Message, state: FSMContext):
    if message.text not in ["9", "10", "11"]:
        await message.delete()
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (9, 10, 11)")
        await state.update_data(last_message_id=msg.message_id)
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    state_data = await state.get_data()
    try:
        await message.bot.delete_message(
            message.chat.id,
            state_data.get("last_message_id")
        )
    except:
        pass

    await message.delete()
    user_data = await state.get_data()
    await db.add_user(
        user_id=message.from_user.id,
        full_name=user_data["full_name"],
        grade=message.text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    msg = await message.answer_photo(
        photo="AgACAgIAAxkBAAIFMWfqgqR8W7mBaZETXrNNf94QRqCvAAJf-DEbFOFQS-irnZf24pu8AQADAgADeAADNgQ",
        caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['full_name']}!\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–∞—Ç—å', —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.",
        reply_markup=get_play_keyboard()
    )
    await state.update_data(last_message_id=msg.message_id)
    await state.clear()

@router.callback_query(F.data == "play_game")
async def play_game(callback: types.CallbackQuery):
    await callback.message.edit_caption(
        caption="üé° –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n–û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–Ω–µ—Ç –∏–≥—Ä—É...",
        reply_markup=None
    )
    await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!")

@router.callback_query(F.data == "check_prize")
async def check_prize(callback: types.CallbackQuery):
    prize = await db.get_winner_prize(callback.from_user.id)
    if prize:
        text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í–∞—à –≤—ã–∏–≥—Ä—ã—à: {prize['prize_name']}"
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è caption (–µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ)
    if callback.message.photo:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            text=text,
            reply_markup=None
        )
    await callback.answer()

# @router.message(Command("photo"))
# async def request_photo_handler(message: types.Message):
#     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.")
#
# @router.message(F.photo)
# async def photo_handler(message: types.Message):
#     photo_id = message.photo[-1].file_id
#     await message.answer(f"ID –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: {photo_id}")