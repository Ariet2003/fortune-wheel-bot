from aiogram import Router, F, types
from aiogram.filters import Command
from keyboards import get_admin_keyboard, get_check_prize_keyboard
from database import Database
from config import PRIZES
import random
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

router = Router()
db = Database()

# –°–ø–∏—Å–æ–∫ GIF –¥–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
LOSING_GIFS = [
    ("PUSTOY_SEXTOR", "–ü—É—Å—Ç–æ–π —Å–µ–∫—Ç–æ—Ä"),
    ("OSHIBKA_404", "–û—à–∏–±–∫–∞ 404"),
    ("POCHTI_NO_NET", "–ü–æ—á—Ç–∏, –Ω–æ –Ω–µ—Ç"),
    ("PRIZ_BYL_RYADOM", "–ü—Ä–∏–∑ –±—ã–ª —Ä—è–¥–æ–º"),
    ("SHANS_BYL_NO_USHOL", "–®–∞–Ω—Å –±—ã–ª, –Ω–æ —É—à—ë–ª")
]

# –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–∑–æ–≤ –Ω–∞ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å GIF
PRIZE_TO_GIF = {
    "shopper": "SHOPER",
    "notebook": "BLOKNOT",
    "pen": "RUCHKA",
    "mug": "KRUZHKA",
    "discount_10": "SERTIFIKAT_10"
}

@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not await db.is_admin(message.from_user.id):
        msg = await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await asyncio.sleep(3)
        await msg.delete()
        await message.delete()
        return
    
    await message.delete()
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "spin_wheel")
async def spin_wheel(callback: types.CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await db.clear_previous_results()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    players = await db.get_all_players()
    if not players:
        await callback.message.edit_text(
            "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.",
            reply_markup=get_admin_keyboard()
        )
        return

    # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    spinning_msg = await callback.message.edit_text("üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è...")
    for i in range(3):
        await asyncio.sleep(1)
        await spinning_msg.edit_text("üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è" + "." * (i + 1))

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã
    available_prizes = await db.get_available_prizes()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º
    eleventh_graders = [p for p in players if p["grade"] == "11"]
    other_players = [p for p in players if p["grade"] != "11"]
    
    winners_text = "–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
    winners_info = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
    
    # –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å—Ä–µ–¥–∏ 11-–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤
    if eleventh_graders and "discount_10" in available_prizes:
        discount_prize = available_prizes["discount_10"]
        num_certificates = min(len(eleventh_graders), discount_prize["remaining_quantity"])
        winners_11 = random.sample(eleventh_graders, num_certificates)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö-11-–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö
        for winner in winners_11:
            if await db.add_winner(winner["user_id"], "discount_10", PRIZES["discount_10"]["name"]):
                winners_text += f"üë§ {winner['full_name']} (–ö–ª–∞—Å—Å: {winner['grade']}) - {PRIZES['discount_10']['name']}\n"
                winners_info.append({
                    "user_id": winner["user_id"],
                    "full_name": winner["full_name"],
                    "grade": winner["grade"],
                    "prize_type": "discount_10",
                    "prize_name": PRIZES["discount_10"]["name"],
                    "gif_id": os.getenv("SERTIFIKAT_10")
                })

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    remaining_players = other_players + [p for p in eleventh_graders if not await db.get_winner_prize(p["user_id"])]
    if remaining_players:
        other_prize_types = [pt for pt in available_prizes.keys() if pt != "discount_10"]
        if other_prize_types:
            random.shuffle(remaining_players)
            random.shuffle(other_prize_types)
            
            for player in remaining_players:
                won_prize = False
                for prize_type in other_prize_types:
                    if await db.add_winner(player["user_id"], prize_type, PRIZES[prize_type]["name"]):
                        winners_text += f"üë§ {player['full_name']} (–ö–ª–∞—Å—Å: {player['grade']}) - {PRIZES[prize_type]['name']}\n"
                        winners_info.append({
                            "user_id": player["user_id"],
                            "full_name": player["full_name"],
                            "grade": player["grade"],
                            "prize_type": prize_type,
                            "prize_name": PRIZES[prize_type]["name"],
                            "gif_id": os.getenv(PRIZE_TO_GIF.get(prize_type, ""))
                        })
                        won_prize = True
                        break
                
                # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª –ø—Ä–∏–∑, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Å —Å–ª—É—á–∞–π–Ω—ã–º GIF –ø—Ä–æ–∏–≥—Ä—ã—à–∞
                if not won_prize:
                    random_gif = random.choice(LOSING_GIFS)
                    winners_info.append({
                        "user_id": player["user_id"],
                        "full_name": player["full_name"],
                        "grade": player["grade"],
                        "prize_type": "no_prize",
                        "prize_name": random_gif[1],
                        "gif_id": os.getenv(random_gif[0])
                    })

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è –ø—Ä–∏–∑–∞–º
    prizes_status = await db.get_prizes_status()
    winners_text += "\nüìä –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏–∑–æ–≤:\n"
    for prize in prizes_status:
        winners_text += f"{prize['prize_name']}: {prize['remaining_quantity']}/{prize['total_quantity']}\n"

    await callback.message.edit_text(
        winners_text,
        reply_markup=get_admin_keyboard()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF-–∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    for winner in winners_info:
        try:
            if winner["gif_id"]:
                await callback.bot.send_animation(
                    winner["user_id"],
                    animation=winner["gif_id"],
                    caption="üéâ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤!"
                )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner['user_id']}: {e}")

    # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    for winner in winners_info:
        try:
            message_text = "üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
            if winner["prize_type"] == "no_prize":
                message_text += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üçÄ"
            else:
                message_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {winner['prize_name']} üéÅ"
            message_text += "\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üé°"
            
            await callback.bot.send_message(
                winner["user_id"],
                message_text
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner['user_id']}: {e}")

@router.callback_query(F.data == "winners_list")
async def show_winners(callback: types.CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    winners = await db.get_all_winners()
    if not winners:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.",
            reply_markup=get_admin_keyboard()
        )
        return

    winners_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    for winner in winners:
        winners_text += (
            f"üë§ {winner['full_name']} (–ö–ª–∞—Å—Å: {winner['grade']})\n"
            f"üéÅ –ü—Ä–∏–∑: {winner['prize_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {winner['win_date']}\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–∑–∞–º
    prizes_status = await db.get_prizes_status()
    winners_text += "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–æ–≤:\n"
    for prize in prizes_status:
        winners_text += f"{prize['prize_name']}: {prize['remaining_quantity']}/{prize['total_quantity']}\n"

    await callback.message.edit_text(
        winners_text,
        reply_markup=get_admin_keyboard()
    )

@router.message(F.animation)
async def get_gif_file_id(message: types.Message):
    if not await db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    file_id = message.animation.file_id
    await message.answer(f"File ID –≤–∞—à–µ–≥–æ GIF:\n\n`{file_id}`", parse_mode="Markdown") 