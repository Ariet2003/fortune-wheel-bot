from aiogram import Router, F, types
from aiogram.filters import Command
from keyboards import get_admin_keyboard, get_check_prize_keyboard
from database import Database
from config import PRIZES
import random
import asyncio

router = Router()
db = Database()

@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not await db.is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "spin_wheel")
async def spin_wheel(callback: types.CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    players = await db.get_all_players()
    if not players:
        await callback.message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤
    available_prizes = []
    for prize_type, prize_info in PRIZES.items():
        available_prizes.extend([prize_type] * prize_info["quantity"])

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–∏–∑—ã
    random.shuffle(available_prizes)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winners = random.sample(players, min(len(players), len(available_prizes)))
    
    # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    spinning_msg = await callback.message.answer("üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è...")
    for i in range(3):
        await asyncio.sleep(1)
        await spinning_msg.edit_text("üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è" + "." * (i + 1))

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑—ã
    winners_text = "–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
    for winner, prize_type in zip(winners, available_prizes):
        prize_name = PRIZES[prize_type]["name"]
        await db.add_winner(winner["user_id"], prize_type, prize_name)
        winners_text += f"üë§ {winner['full_name']} (–ö–ª–∞—Å—Å: {winner['grade']}) - {prize_name}\n"

    await spinning_msg.delete()
    await callback.message.answer(winners_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
    for winner in winners:
        try:
            await callback.bot.send_message(
                winner["user_id"],
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –ø—Ä–∏–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_check_prize_keyboard()
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner['user_id']}: {e}")

@router.callback_query(F.data == "winners_list")
async def show_winners(callback: types.CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    winners = await db.get_all_winners()
    if not winners:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    winners_text = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n"
    for winner in winners:
        winners_text += (
            f"üë§ {winner['full_name']} (–ö–ª–∞—Å—Å: {winner['grade']})\n"
            f"üéÅ –ü—Ä–∏–∑: {winner['prize_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {winner['win_date']}\n\n"
        )

    await callback.message.answer(winners_text) 